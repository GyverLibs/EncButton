<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_utils_8h" xml:lang="en-US">
<title>src/core/utils.h File Reference</title>
<indexterm><primary>src/core/utils.h</primary></indexterm>
<para>

<para>Utility functions for handling pins and flags. </para>
 
</para>
<programlisting linenumbering="unnumbered">#include &lt;Arduino.h&gt;<?linebreak?></programlisting><simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#define <link linkend="_utils_8h_1a4d04a1d6fed6589d40376ca9b2a6ef98">EB_FLAGS</link></para>
</listitem>
            <listitem><para>#define <link linkend="_utils_8h_1a8a0d2d602acb24d74237c3f310e935cd">X</link>(a,  b)&#160;&#160;&#160;a = (1 &lt;&lt; b),</para>
</listitem>
            <listitem><para>#define <link linkend="_utils_8h_1aa32f6fd8b330750d6d09858020224537">EB_UPTIME</link>()&#160;&#160;&#160;millis()</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para>typedef void(* <link linkend="_utils_8h_1a4c528c24d8196164062904f004d96c84">cb_t</link>) ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Enumerations    </title>
        <itemizedlist>
            <listitem><para>enum <link linkend="_utils_8h_1a5522e17c74054cb11d1d67e4bdeca67e">EB_FLAGS_T</link> { <link linkend="_utils_8h_1a5522e17c74054cb11d1d67e4bdeca67eaa08b435bb960b681662a924444d0fa8b">EB_FLAGS</link>
 }</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>bool <link linkend="_utils_8h_1a625e5f80e7944b05a709cb27d08211bb">EBread</link> (const uint8_t pin)</para>
</listitem>
            <listitem><para>void <link linkend="_utils_8h_1af74a9306d2c033fe5f90bcd54010baf4">EBwrite</link> (const uint8_t pin, bool value)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Utility functions for handling pins and flags. </para>
<para>
Definition in file <link linkend="_utils_8h_source">utils.h</link>.</para>
</section>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="_utils_8h_1a4d04a1d6fed6589d40376ca9b2a6ef98"/><section>
    <title>EB_FLAGS</title>
<indexterm><primary>EB_FLAGS</primary><secondary>utils.h</secondary></indexterm>
<indexterm><primary>utils.h</primary><secondary>EB_FLAGS</secondary></indexterm>
<para><computeroutput>#define EB_FLAGS</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;<link linkend="_utils_8h_1a8a0d2d602acb24d74237c3f310e935cd">X</link>(EB_NONE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;0)\
&#32;&#32;&#32;&#32;X(EB_PRESS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;1)\
&#32;&#32;&#32;&#32;X(EB_STEP&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;2)\
&#32;&#32;&#32;&#32;X(EB_HOLD&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;3)\
&#32;&#32;&#32;&#32;X(EB_RELEASE&#32;&#32;&#32;&#32;&#32;&#32;,&#32;4)\
&#32;&#32;&#32;&#32;X(EB_CLICK&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;5)\
&#32;&#32;&#32;&#32;X(EB_CLICKS&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;6)\
&#32;&#32;&#32;&#32;X(EB_REL_HOLD&#32;&#32;&#32;&#32;&#32;,&#32;7)\
&#32;&#32;&#32;&#32;X(EB_REL_HOLD_C&#32;&#32;&#32;,&#32;8)\
&#32;&#32;&#32;&#32;X(EB_REL_STEP&#32;&#32;&#32;&#32;&#32;,&#32;9)\
&#32;&#32;&#32;&#32;X(EB_REL_STEP_C&#32;&#32;&#32;,&#32;10)\
&#32;&#32;&#32;&#32;X(EB_TURN&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;11)\
&#32;&#32;&#32;&#32;X(EB_TURN_R&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;12)\
&#32;&#32;&#32;&#32;X(EB_TURN_L&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;13)\
&#32;&#32;&#32;&#32;X(EB_TURN_HOLD_R&#32;&#32;,&#32;14)\
&#32;&#32;&#32;&#32;X(EB_TURN_HOLD_L&#32;&#32;,&#32;15)
</programlisting><para>
Definition at line <link linkend="_utils_8h_source_1l00012">12</link> of file <link linkend="_utils_8h_source">utils.h</link>.</para>
<programlisting linenumbering="unnumbered">00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00033 &#32;&#32;&#32;&#32;<link linkend="_utils_8h_1a4d04a1d6fed6589d40376ca9b2a6ef98">EB_FLAGS</link>
00034 }&#32;<link linkend="_utils_8h_1a5522e17c74054cb11d1d67e4bdeca67e">EB_FLAGS_T</link>;
00035 <emphasis role="preprocessor">#undef&#32;X&#x240D;</emphasis>
00036 
00037 <emphasis role="preprocessor">#define&#32;EB_UPTIME()&#32;millis()&#x240D;</emphasis>
00038 
00039 <emphasis role="keyword">typedef</emphasis>&#32;void&#32;(*<link linkend="_utils_8h_1a4c528c24d8196164062904f004d96c84">cb_t</link>)();
00040 
00041 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_utils_8h_1a625e5f80e7944b05a709cb27d08211bb">EBread</link>(<emphasis role="keyword">const</emphasis>&#32;uint8_t&#32;pin);
00042 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_utils_8h_1af74a9306d2c033fe5f90bcd54010baf4">EBwrite</link>(<emphasis role="keyword">const</emphasis>&#32;uint8_t&#32;pin,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;value);
</programlisting></section>
<anchor xml:id="_utils_8h_1aa32f6fd8b330750d6d09858020224537"/><section>
    <title>EB_UPTIME</title>
<indexterm><primary>EB_UPTIME</primary><secondary>utils.h</secondary></indexterm>
<indexterm><primary>utils.h</primary><secondary>EB_UPTIME</secondary></indexterm>
<para><computeroutput>#define EB_UPTIME( )&#160;&#160;&#160;millis()</computeroutput></para><para>
Definition at line <link linkend="_utils_8h_source_1l00037">37</link> of file <link linkend="_utils_8h_source">utils.h</link>.</para>
</section>
<anchor xml:id="_utils_8h_1a8a0d2d602acb24d74237c3f310e935cd"/><section>
    <title>X</title>
<indexterm><primary>X</primary><secondary>utils.h</secondary></indexterm>
<indexterm><primary>utils.h</primary><secondary>X</secondary></indexterm>
<para><computeroutput>#define X( a,  b)&#160;&#160;&#160;a = (1 &lt;&lt; b),</computeroutput></para><para>
Definition at line <link linkend="_utils_8h_source_1l00031">31</link> of file <link linkend="_utils_8h_source">utils.h</link>.</para>
</section>
</section>
<section>
<title>Typedef Documentation</title>
<anchor xml:id="_utils_8h_1a4c528c24d8196164062904f004d96c84"/><section>
    <title>cb_t</title>
<indexterm><primary>cb_t</primary><secondary>utils.h</secondary></indexterm>
<indexterm><primary>utils.h</primary><secondary>cb_t</secondary></indexterm>
<para><computeroutput>typedef void(* cb_t) ()</computeroutput></para><para>
Definition at line <link linkend="_utils_8h_source_1l00039">39</link> of file <link linkend="_utils_8h_source">utils.h</link>.</para>
</section>
</section>
<section>
<title>Enumeration Type Documentation</title>
<anchor xml:id="_utils_8h_1a5522e17c74054cb11d1d67e4bdeca67e"/><section>
    <title>EB_FLAGS_T</title>
<indexterm><primary>EB_FLAGS_T</primary><secondary>utils.h</secondary></indexterm>
<indexterm><primary>utils.h</primary><secondary>EB_FLAGS_T</secondary></indexterm>
<para><computeroutput>enum <link linkend="_utils_8h_1a5522e17c74054cb11d1d67e4bdeca67e">EB_FLAGS_T</link></computeroutput></para><informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>EB_FLAGS</primary><secondary>utils.h</secondary></indexterm>
<indexterm><primary>utils.h</primary><secondary>EB_FLAGS</secondary></indexterm>
<anchor xml:id="_utils_8h_1a5522e17c74054cb11d1d67e4bdeca67eaa08b435bb960b681662a924444d0fa8b"/>EB_FLAGS</entry><entry></entry></row>    </tbody>
    </tgroup>
</informaltable>
<para>
Definition at line <link linkend="_utils_8h_source_1l00032">32</link> of file <link linkend="_utils_8h_source">utils.h</link>.</para>
<programlisting linenumbering="unnumbered">00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00033 &#32;&#32;&#32;&#32;<link linkend="_utils_8h_1a4d04a1d6fed6589d40376ca9b2a6ef98">EB_FLAGS</link>
00034 }&#32;<link linkend="_utils_8h_1a5522e17c74054cb11d1d67e4bdeca67e">EB_FLAGS_T</link>;
</programlisting></section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_utils_8h_1a625e5f80e7944b05a709cb27d08211bb"/><section>
    <title>EBread()</title>
<indexterm><primary>EBread</primary><secondary>utils.h</secondary></indexterm>
<indexterm><primary>utils.h</primary><secondary>EBread</secondary></indexterm>
<para><computeroutput>bool EBread (const uint8_t pin)</computeroutput></para><para>
Definition at line <link linkend="_utils_8cpp_source_1l00003">3</link> of file <link linkend="_utils_8cpp_source">utils.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00004 <emphasis role="preprocessor">#if&#32;defined(__AVR_ATmega328P__)&#32;||&#32;defined(__AVR_ATmega168__)&#x240D;</emphasis>
00005 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pin&#32;&lt;&#32;8)
00006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;bitRead(PIND,&#32;pin);
00007 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pin&#32;&lt;&#32;14)
00008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;bitRead(PINB,&#32;pin&#32;-&#32;8);
00009 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pin&#32;&lt;&#32;20)
00010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;bitRead(PINC,&#32;pin&#32;-&#32;14);
00011 <emphasis role="preprocessor">#elif&#32;defined(__AVR_ATtiny85__)&#32;||&#32;defined(__AVR_ATtiny13__)&#x240D;</emphasis>
00012 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;bitRead(PINB,&#32;pin);
00013 <emphasis role="preprocessor">#elif&#32;defined(__AVR_ATmega2560__)&#x240D;</emphasis>
00014 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pin&#32;&lt;&#32;8)
00015 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;bitRead(PIND,&#32;pin);
00016 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pin&#32;&lt;&#32;14)
00017 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;bitRead(PINE,&#32;pin&#32;-&#32;8);
00018 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pin&#32;&lt;&#32;22)
00019 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;bitRead(PING,&#32;pin&#32;-&#32;14);
00020 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pin&#32;&lt;&#32;30)
00021 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;bitRead(PINH,&#32;pin&#32;-&#32;22);
00022 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pin&#32;&lt;&#32;38)
00023 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;bitRead(PINJ,&#32;pin&#32;-&#32;30);
00024 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pin&#32;&lt;&#32;46)
00025 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;bitRead(PINK,&#32;pin&#32;-&#32;38);
00026 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pin&#32;&lt;&#32;54)
00027 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;bitRead(PINL,&#32;pin&#32;-&#32;46);
00028 <emphasis role="preprocessor">#else&#x240D;</emphasis>
00029 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;digitalRead(pin);
00030 <emphasis role="preprocessor">#endif&#x240D;</emphasis>
00031 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
00032 }
</programlisting></section>
<anchor xml:id="_utils_8h_1af74a9306d2c033fe5f90bcd54010baf4"/><section>
    <title>EBwrite()</title>
<indexterm><primary>EBwrite</primary><secondary>utils.h</secondary></indexterm>
<indexterm><primary>utils.h</primary><secondary>EBwrite</secondary></indexterm>
<para><computeroutput>void EBwrite (const uint8_t pin, bool value)</computeroutput></para><para>
Definition at line <link linkend="_utils_8cpp_source_1l00034">34</link> of file <link linkend="_utils_8cpp_source">utils.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00035 <emphasis role="preprocessor">#if&#32;defined(__AVR_ATmega328P__)&#32;||&#32;defined(__AVR_ATmega168__)&#x240D;</emphasis>
00036 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pin&#32;&lt;&#32;8)
00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bitWrite(PORTD,&#32;pin,&#32;value);
00038 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pin&#32;&lt;&#32;14)
00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bitWrite(PORTB,&#32;pin&#32;-&#32;8,&#32;value);
00040 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pin&#32;&lt;&#32;20)
00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bitWrite(PORTC,&#32;pin&#32;-&#32;14,&#32;value);
00042 <emphasis role="preprocessor">#elif&#32;defined(__AVR_ATtiny85__)&#32;||&#32;defined(__AVR_ATtiny13__)&#x240D;</emphasis>
00043 &#32;&#32;&#32;&#32;bitWrite(PORTB,&#32;pin,&#32;value);
00044 <emphasis role="preprocessor">#elif&#32;defined(__AVR_ATmega2560__)&#x240D;</emphasis>
00045 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pin&#32;&lt;&#32;8)
00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bitWrite(PORTD,&#32;pin,&#32;value);
00047 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pin&#32;&lt;&#32;14)
00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bitWrite(PORTE,&#32;pin&#32;-&#32;8,&#32;value);
00049 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pin&#32;&lt;&#32;22)
00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bitWrite(PORTG,&#32;pin&#32;-&#32;14,&#32;value);
00051 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pin&#32;&lt;&#32;30)
00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bitWrite(PORTH,&#32;pin&#32;-&#32;22,&#32;value);
00053 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pin&#32;&lt;&#32;38)
00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bitWrite(PORTJ,&#32;pin&#32;-&#32;30,&#32;value);
00055 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pin&#32;&lt;&#32;46)
00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bitWrite(PORTK,&#32;pin&#32;-&#32;38,&#32;value);
00057 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pin&#32;&lt;&#32;54)
00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bitWrite(PORTL,&#32;pin&#32;-&#32;46,&#32;value);
00059 <emphasis role="preprocessor">#else&#x240D;</emphasis>
00060 &#32;&#32;&#32;&#32;digitalWrite(pin,&#32;value);
00061 <emphasis role="preprocessor">#endif&#x240D;</emphasis>
00062 }
</programlisting></section>
</section>
</section>
