.TH "src/core/VirtEncoder.h" 3 "Version 3.5" "EncButton" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/core/VirtEncoder.h \- Virtual encoder class\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <Arduino\&.h>\fP
.br
\fC#include 'utils\&.h'\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBVirtEncoder\fP"
.br
.RI "A class representing a virtual encoder\&. This class provides methods to set the encoder's properties, attach_call callback functions for handling encoder events, and poll the encoder for rotation and direction\&. "
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBEB_STEP4_LOW\fP   0"
.br
.ti -1c
.RI "#define \fBEB_STEP4_HIGH\fP   1"
.br
.ti -1c
.RI "#define \fBEB_STEP2\fP   2"
.br
.ti -1c
.RI "#define \fBEB_STEP1\fP   3"
.br
.ti -1c
.RI "#define \fBENC_FLAGS\fP"
.br
.ti -1c
.RI "#define \fBX\fP(a,  b)   a = (1 << b),"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBENC_FLAG_T\fP { \fBENC_FLAGS\fP }"
.br
.in -1c
.SH "Detailed Description"
.PP 
Virtual encoder class\&. 


.PP
Definition in file \fBVirtEncoder\&.h\fP\&.
.SH "Macro Definition Documentation"
.PP 
.SS "#define EB_STEP1   3"

.PP
Definition at line \fB17\fP of file \fBVirtEncoder\&.h\fP\&.
.SS "#define EB_STEP2   2"

.PP
Definition at line \fB16\fP of file \fBVirtEncoder\&.h\fP\&.
.SS "#define EB_STEP4_HIGH   1"

.PP
Definition at line \fB15\fP of file \fBVirtEncoder\&.h\fP\&.
.SS "#define EB_STEP4_LOW   0"

.PP
Definition at line \fB14\fP of file \fBVirtEncoder\&.h\fP\&.
.SS "#define ENC_FLAGS"
\fBValue:\fP.PP
.nf
    X(E_TYPE,    0)\\
    X(E_REVERSE, 2)\\
    X(E_FAST,    3)\\
    X(E_DIR,     4)\\
    X(E_TRN_R,   5)\\
    X(E_ISR_F,   6)\\
    X(E_ISR,     7)
.fi

.PP
Definition at line \fB19\fP of file \fBVirtEncoder\&.h\fP\&..PP
.nf
30              {
31     ENC_FLAGS
32 } ENC_FLAG_T;
33 #undef X
34 
42 class VirtEncoder {
43    public:
44    
48     VirtEncoder() : prev(0), ecount(0) {}
49     
50     // ====================== SET ======================
51 
57     void setEncReverse(bool rev = false) {
58         if (rev) set_encf(E_REVERSE);
59         else clr_encf(E_REVERSE);
60     }
61 
67     void setEncType(uint8_t type = EB_STEP1) {
68         flags = (flags & 0b11111100) | type;
69     }
70 
78     void setEncISR(bool use=true){
79         write_encf(E_ISR, use);
80     }
81 
89     bool attach_right(cb_t callback_func){
90 #ifndef EB_NO_CALLBACK
91         uint8_t l_r = (read_encf(E_REVERSE)) ? 1 : 0;
92         if (callback_func == nullptr || cb[l_r]) return false;
93         cb[l_r] = *callback_func;
94         return true;
95 #endif
96         return false;
97     }
98 
105     bool attach_left(cb_t callback_func){
106 #ifndef EB_NO_CALLBACK
107         uint8_t l_r = (read_encf(E_REVERSE)) ? 0 : 1;
108         if (callback_func == nullptr || cb[l_r]) return false;
109         cb[l_r] = *callback_func;
110         return true;
111 #endif
112         return false;
113     }
114 
115     //todo universal function
116     // void attach_call(){}
117 
121     void detach_call() {
122 #ifndef EB_NO_CALLBACK
123         cb[0] = nullptr;
124         cb[1] = nullptr;
125 #endif
126     }
127 
134     void initEnc(bool e0, bool e1) {
135         initEnc(e0 | (e1 << 1));
136     }
137 
143     void initEnc(int8_t v) {
144         prev = v;
145     }
146 
150     void clear() {
151         if (read_encf(E_TRN_R)) clr_encf(E_TRN_R);
152     }
153 
154     // ====================== POLL ======================
155 
161     bool turn() {
162         return read_encf(E_TRN_R);
163     }
164 
170     int8_t dir() {
171         return read_encf(E_DIR) ? 1 : \-1;
172     }
173 
182     EB_FLAGS_T action() {
183         switch (flags & 0b111111111) {
184             case(E_TRN_R | E_FAST):
185                 return EB_TURN;
186             case(E_TRN_R | E_DIR | E_REVERSE):
187                 return EB_TURN_L;
188             case(E_TRN_R | E_DIR):
189                 return EB_TURN_R;   
190             default:
191                 return EB_NONE;
192         }
193     }
194 
202     int8_t tickISR(bool e0, bool e1) {
203         return tickISR(e0 | (e1 << 1));
204     }
205 
212     int8_t tickISR(int8_t state) {
213         state = pollEnc(state);
214         if (state) {
215             set_encf(E_ISR_F);
216             write_encf(E_DIR, state > 0);
217         }
218         return state;
219     }
220 
228     int8_t tick(bool e0, bool e1) {
229         return tick(e0 | (e1 << 1));
230     }
231 
238     int8_t tick(int8_t state) {
239         state = tickRaw(state);
240         if (state)
241         {
242     #ifndef EB_NO_CALLBACK
243             if (cb[0] && state < 0) cb[0]();
244             if (cb[1] && state > 0) cb[1]();
245     #endif
246             return state;
247         }
248         clear();
249         return 0;
250     }
251 
257     int8_t tick() {
258         return tick(\-1);
259     }
260 
268     int8_t tickRaw(bool e0, bool e1) {
269         return tickRaw(e0 | (e1 << 1));
270     }
271 
279     int8_t tickRaw(int8_t state) {
280         if (read_encf(E_ISR_F)) {
281             clr_encf(E_ISR_F);
282             set_encf(E_TRN_R);
283             return dir();
284         }
285         if ((state >= 0) && (state = pollEnc(state))) {
286             write_encf(E_DIR, state > 0);
287             set_encf(E_TRN_R);
288             return state;
289         }
290         return 0;
291     }
292 
293     
294     int8_t tickRaw() {
295         return tickRaw(\-1);
296     }
297 
305     int8_t pollEnc(bool e0, bool e1) {
306         return pollEnc(e0 | (e1 << 1));
307     }
308 
315     int8_t pollEnc(int8_t state) {
316         if (prev != state) {
317             ecount += ((0x49941661 >> ((state | (prev << 2)) << 1)) & 0b11) \- 1;
318             prev = state;
319             if (!ecount) return 0;
320             switch (flags & 0b11) {
321                 case EB_STEP4_LOW:
322                     if (state != 0b11) return 0;  // skip 00, 01, 10
323                     break;
324                 case EB_STEP4_HIGH:
325                     if (state) return 0;  // skip 01, 10, 11
326                     break;
327                 case EB_STEP2:
328                     if (state == 0b10 || state == 0b01) return 0;  // skip 10 01
329                     break;
330             }
331             state = ((ecount > 0) ^ read_encf(E_REVERSE)) ? 1 : \-1;
332             ecount = 0;
333 #ifndef EB_NO_COUNTER
334             counter += state;
335 #endif
336             return state;
337         }
338         return 0;
339     }
340 
341 #ifndef EB_NO_COUNTER
342     int32_t counter = 0;
343 #endif
344 
345     // ===================== PROTECTED =====================
346    protected:
347     inline void set_encf(const uint16_t x) __attribute__((always_inline)) {
348         flags |= x;
349     }
350     inline void clr_encf(const uint16_t x) __attribute__((always_inline)) {
351         flags &= ~x;
352     }
353     inline void write_encf(const uint16_t x, bool v) __attribute__((always_inline)) {
354         if (v) set_encf(x);
355         else clr_encf(x);
356     }
357     inline bool read_encf(const uint16_t x) __attribute__((always_inline)) {
358         return flags & x;
359     }
360 
361 #ifndef EB_NO_CALLBACK
362     cb_t cb[2] = {nullptr, nullptr}; // callbacks for right and left turns
363 #endif
364 
365     // ===================== PRIVATE =====================
366    private:
367     uint8_t flags = 0;
368     int8_t prev : 4;
369     int8_t ecount : 4;
370 }
.fi

.SS "#define X(a, b)   a = (1 << b),"

.PP
Definition at line \fB29\fP of file \fBVirtEncoder\&.h\fP\&.
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBENC_FLAG_T\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIENC_FLAGS \fP\fP
.PP
Definition at line \fB30\fP of file \fBVirtEncoder\&.h\fP\&..PP
.nf
30              {
31     ENC_FLAGS
32 } ENC_FLAG_T;
.fi

.SH "Author"
.PP 
Generated automatically by Doxygen for EncButton from the source code\&.
