<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="d3/d01/class_encoder" kind="class" language="C++" prot="public">
    <compoundname>Encoder</compoundname>
    <basecompoundref refid="dc/d02/class_virt_encoder" prot="public" virt="non-virtual">VirtEncoder</basecompoundref>
    <includes refid="df/d03/_encoder_8h" local="no">Encoder.h</includes>
    <sectiondef kind="user-defined">
      <header>tickRaw   &lt;br&gt;</header>
      <description><para>Process the encoder tick without clearing the turn flag.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">state</parametername>
</parameternamelist>
<parameterdescription>
<para>the current state of the encoder </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-1, 0, or 1 based on the direction of rotation </para>
</simplesect>
</para>
</description>
      <memberdef kind="function" id="dc/d02/class_virt_encoder_1a439bdcec3f5dc165e4a4ed8b8fdb9035" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t VirtEncoder::tickRaw</definition>
        <argsstring>(int8_t state)</argsstring>
        <name>tickRaw</name>
        <qualifiedname>VirtEncoder::tickRaw</qualifiedname>
        <param>
          <type>int8_t</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/VirtEncoder.h" line="279" column="12" bodyfile="src/core/VirtEncoder.h" bodystart="279" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="dc/d02/class_virt_encoder_1aa5dbe1eb7b590f4a97498a20e1b5542e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t VirtEncoder::pollEnc</definition>
        <argsstring>(bool e0, bool e1)</argsstring>
        <name>pollEnc</name>
        <qualifiedname>VirtEncoder::pollEnc</qualifiedname>
        <param>
          <type>bool</type>
          <declname>e0</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>e1</declname>
        </param>
        <briefdescription>
<para>Poll the encoder without setting the turn flag. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">e0</parametername>
</parameternamelist>
<parameterdescription>
<para>the value of the first encoder pin </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">e1</parametername>
</parameternamelist>
<parameterdescription>
<para>the value of the second encoder pin </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-1, 0, or 1 based on the direction of rotation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/VirtEncoder.h" line="305" column="12" bodyfile="src/core/VirtEncoder.h" bodystart="305" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="dc/d02/class_virt_encoder_1a0257b348f0139e7a8fed629bb8acbde0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t VirtEncoder::pollEnc</definition>
        <argsstring>(int8_t state)</argsstring>
        <name>pollEnc</name>
        <qualifiedname>VirtEncoder::pollEnc</qualifiedname>
        <param>
          <type>int8_t</type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Poll the encoder without setting the turn flag. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">state</parametername>
</parameternamelist>
<parameterdescription>
<para>the current state of the encoder </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-1, 0, or 1 based on the direction of rotation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/VirtEncoder.h" line="315" column="12" bodyfile="src/core/VirtEncoder.h" bodystart="315" bodyend="339"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d02/class_virt_encoder_1a966668cc0a577818e294a4084b4dabea" prot="public" static="no" mutable="no">
        <type>int32_t</type>
        <definition>int32_t VirtEncoder::counter</definition>
        <argsstring></argsstring>
        <name>counter</name>
        <qualifiedname>VirtEncoder::counter</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/VirtEncoder.h" line="342" column="13" bodyfile="src/core/VirtEncoder.h" bodystart="342" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d02/class_virt_encoder_1a1d31ec913728966cf0ef6ca774c5cfe6" prot="protected" static="no" mutable="no">
        <type><ref refid="d5/d00/utils_8h_1a4c528c24d8196164062904f004d96c84" kindref="member">cb_t</ref></type>
        <definition>cb_t VirtEncoder::cb[2]</definition>
        <argsstring>[2]</argsstring>
        <name>cb</name>
        <qualifiedname>VirtEncoder::cb</qualifiedname>
        <initializer>= {nullptr, nullptr}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/VirtEncoder.h" line="362" column="10" bodyfile="src/core/VirtEncoder.h" bodystart="362" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="dc/d02/class_virt_encoder_1aab174e7ed37b422a27192aedee8be977" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void VirtEncoder::set_encf</definition>
        <argsstring>(const uint16_t x) __attribute__((always_inline))</argsstring>
        <name>set_encf</name>
        <qualifiedname>VirtEncoder::set_encf</qualifiedname>
        <param>
          <type>const uint16_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/VirtEncoder.h" line="347" column="17" bodyfile="src/core/VirtEncoder.h" bodystart="347" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="dc/d02/class_virt_encoder_1a6bdb1a2dec10e1be3c14c3c49869ebab" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void VirtEncoder::clr_encf</definition>
        <argsstring>(const uint16_t x) __attribute__((always_inline))</argsstring>
        <name>clr_encf</name>
        <qualifiedname>VirtEncoder::clr_encf</qualifiedname>
        <param>
          <type>const uint16_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/VirtEncoder.h" line="350" column="17" bodyfile="src/core/VirtEncoder.h" bodystart="350" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="dc/d02/class_virt_encoder_1aa729ee6d9919727d86a7eecd2f51e724" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void VirtEncoder::write_encf</definition>
        <argsstring>(const uint16_t x, bool v) __attribute__((always_inline))</argsstring>
        <name>write_encf</name>
        <qualifiedname>VirtEncoder::write_encf</qualifiedname>
        <param>
          <type>const uint16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/VirtEncoder.h" line="353" column="17" bodyfile="src/core/VirtEncoder.h" bodystart="353" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="dc/d02/class_virt_encoder_1a1daa32206f3c108deb4aaad943f96fef" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool VirtEncoder::read_encf</definition>
        <argsstring>(const uint16_t x) __attribute__((always_inline))</argsstring>
        <name>read_encf</name>
        <qualifiedname>VirtEncoder::read_encf</qualifiedname>
        <param>
          <type>const uint16_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/VirtEncoder.h" line="357" column="17" bodyfile="src/core/VirtEncoder.h" bodystart="357" bodyend="359"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d3/d01/class_encoder_1a74b8a66356f7789ee21cf25e69576666" prot="private" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t Encoder::e0</definition>
        <argsstring></argsstring>
        <name>e0</name>
        <qualifiedname>Encoder::e0</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/Encoder.h" line="83" column="13" bodyfile="src/core/Encoder.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d3/d01/class_encoder_1ae251adbf3347809ad4bd2233b3a82d5a" prot="private" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t Encoder::e1</definition>
        <argsstring></argsstring>
        <name>e1</name>
        <qualifiedname>Encoder::e1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/Encoder.h" line="83" column="16" bodyfile="src/core/Encoder.h" bodystart="83" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="d3/d01/class_encoder_1afa2f29643453e2a3daeac00b0eaec48e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Encoder::Encoder</definition>
        <argsstring>(uint8_t encA=0, uint8_t encB=0, uint8_t mode=INPUT)</argsstring>
        <name>Encoder</name>
        <qualifiedname>Encoder::Encoder</qualifiedname>
        <param>
          <type>uint8_t</type>
          <declname>encA</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>encB</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>mode</declname>
          <defval>INPUT</defval>
        </param>
        <briefdescription>
<para>Constructs an <ref refid="d3/d01/class_encoder" kindref="compound">Encoder</ref> object with the specified pin numbers and mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>encA</parametername>
</parameternamelist>
<parameterdescription>
<para>The pin number for encoder A. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>encB</parametername>
</parameternamelist>
<parameterdescription>
<para>The pin number for encoder B. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The mode of the pins (INPUT, OUTPUT, INPUT_PULLUP, etc.). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/Encoder.h" line="26" column="5" bodyfile="src/core/Encoder.h" bodystart="26" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="d3/d01/class_encoder_1adf55c5cca9a90167e22508fe6cdded45" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Encoder::init</definition>
        <argsstring>(uint8_t encA=0, uint8_t encB=0, uint8_t mode=INPUT)</argsstring>
        <name>init</name>
        <qualifiedname>Encoder::init</qualifiedname>
        <param>
          <type>uint8_t</type>
          <declname>encA</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>encB</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>mode</declname>
          <defval>INPUT</defval>
        </param>
        <briefdescription>
<para>Initializes the encoder with the specified pin numbers and mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>encA</parametername>
</parameternamelist>
<parameterdescription>
<para>The pin number for encoder A. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>encB</parametername>
</parameternamelist>
<parameterdescription>
<para>The pin number for encoder B. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The mode of the pins (INPUT, OUTPUT, INPUT_PULLUP, etc.). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/Encoder.h" line="37" column="10" bodyfile="src/core/Encoder.h" bodystart="37" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="d3/d01/class_encoder_1aba6517e3652d6b92b55e9b9a0b2a8667" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t Encoder::tickISR</definition>
        <argsstring>()</argsstring>
        <name>tickISR</name>
        <qualifiedname>Encoder::tickISR</qualifiedname>
        <briefdescription>
<para>Performs a tick operation on the encoder using an interrupt service routine (ISR). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The change in encoder position. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/Encoder.h" line="50" column="12" bodyfile="src/core/Encoder.h" bodystart="50" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="d3/d01/class_encoder_1a10b27af0b62a9bc4138f861ab19c4b08" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t Encoder::tick</definition>
        <argsstring>()</argsstring>
        <name>tick</name>
        <qualifiedname>Encoder::tick</qualifiedname>
        <briefdescription>
<para>Performs a tick operation on the encoder. </para>
        </briefdescription>
        <detaileddescription>
<para>If the encoder has an interrupt flag set, it uses the interrupt-based tick operation. Otherwise, it uses the regular tick operation.</para>
<para><simplesect kind="return"><para>The change in encoder position. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/Encoder.h" line="61" column="12" bodyfile="src/core/Encoder.h" bodystart="61" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="d3/d01/class_encoder_1a81df852424a4b900d9ad92429405aae3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t Encoder::tickRaw</definition>
        <argsstring>()</argsstring>
        <name>tickRaw</name>
        <qualifiedname>Encoder::tickRaw</qualifiedname>
        <briefdescription>
<para>Performs a raw tick operation on the encoder. </para>
        </briefdescription>
        <detaileddescription>
<para>If the encoder has an interrupt flag set, it uses the interrupt-based raw tick operation. Otherwise, it uses the regular raw tick operation.</para>
<para><simplesect kind="return"><para>The change in encoder position. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/Encoder.h" line="75" column="12" bodyfile="src/core/Encoder.h" bodystart="75" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="dc/d02/class_virt_encoder_1ad161c0d2a29621731ff89d250ddd8a4f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void VirtEncoder::setEncReverse</definition>
        <argsstring>(bool rev=false)</argsstring>
        <name>setEncReverse</name>
        <qualifiedname>VirtEncoder::setEncReverse</qualifiedname>
        <param>
          <type>bool</type>
          <declname>rev</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Set the encoder&apos;s reverse flag. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">rev</parametername>
</parameternamelist>
<parameterdescription>
<para>true to reverse the encoder, false otherwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/VirtEncoder.h" line="57" column="10" bodyfile="src/core/VirtEncoder.h" bodystart="57" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="dc/d02/class_virt_encoder_1aade2ae205e9ec50bed6d76ce3c0f33a9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void VirtEncoder::setEncType</definition>
        <argsstring>(uint8_t type=EB_STEP1)</argsstring>
        <name>setEncType</name>
        <qualifiedname>VirtEncoder::setEncType</qualifiedname>
        <param>
          <type>uint8_t</type>
          <declname>type</declname>
          <defval><ref refid="d2/d01/_virt_encoder_8h_1ab5c622eaea29916b55c4b2f8023cbbe3" kindref="member">EB_STEP1</ref></defval>
        </param>
        <briefdescription>
<para>Set the encoder&apos;s type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">type</parametername>
</parameternamelist>
<parameterdescription>
<para>the encoder type to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/VirtEncoder.h" line="67" column="10" bodyfile="src/core/VirtEncoder.h" bodystart="67" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="dc/d02/class_virt_encoder_1a5d17150b3610b8978bdde0540c1e1c55" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void VirtEncoder::setEncISR</definition>
        <argsstring>(bool use=true)</argsstring>
        <name>setEncISR</name>
        <qualifiedname>VirtEncoder::setEncISR</qualifiedname>
        <param>
          <type>bool</type>
          <declname>use</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Set the encoder&apos;s interrupt service routine. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">use</parametername>
</parameternamelist>
<parameterdescription>
<para>true to use the ISR, false otherwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Argument &quot;use&quot; by default is true because name of this function means that it is used to set/activate the ISR. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/VirtEncoder.h" line="78" column="10" bodyfile="src/core/VirtEncoder.h" bodystart="78" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="dc/d02/class_virt_encoder_1ae8b27255ffb4264dd2ed1110c9926191" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool VirtEncoder::attach_right</definition>
        <argsstring>(cb_t callback_func)</argsstring>
        <name>attach_right</name>
        <qualifiedname>VirtEncoder::attach_right</qualifiedname>
        <param>
          <type><ref refid="d5/d00/utils_8h_1a4c528c24d8196164062904f004d96c84" kindref="member">cb_t</ref></type>
          <declname>callback_func</declname>
        </param>
        <briefdescription>
<para>Attach a callback function to handle encoder events when turned right. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">callback_func</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the callback function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>callback_func can be &quot;cb_t&quot; type </para>
</simplesect>
<simplesect kind="return"><para>true if the callback is attached, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/VirtEncoder.h" line="89" column="10" bodyfile="src/core/VirtEncoder.h" bodystart="89" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="dc/d02/class_virt_encoder_1a96eb6f113c8af74ad511ee646f4159f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool VirtEncoder::attach_left</definition>
        <argsstring>(cb_t callback_func)</argsstring>
        <name>attach_left</name>
        <qualifiedname>VirtEncoder::attach_left</qualifiedname>
        <param>
          <type><ref refid="d5/d00/utils_8h_1a4c528c24d8196164062904f004d96c84" kindref="member">cb_t</ref></type>
          <declname>callback_func</declname>
        </param>
        <briefdescription>
<para>Attach a callback function to handle encoder events when turned left. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">callback_func</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the callback function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the callback is attached, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/VirtEncoder.h" line="105" column="10" bodyfile="src/core/VirtEncoder.h" bodystart="105" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="dc/d02/class_virt_encoder_1a3a32f66b8b6888e75bb17e6ad88f12f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void VirtEncoder::detach_call</definition>
        <argsstring>()</argsstring>
        <name>detach_call</name>
        <qualifiedname>VirtEncoder::detach_call</qualifiedname>
        <briefdescription>
<para>Detach the callback functions for handling encoder events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/VirtEncoder.h" line="121" column="10" bodyfile="src/core/VirtEncoder.h" bodystart="121" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="dc/d02/class_virt_encoder_1a5cb9dd003233ebe80ec7c8946492c961" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void VirtEncoder::initEnc</definition>
        <argsstring>(bool e0, bool e1)</argsstring>
        <name>initEnc</name>
        <qualifiedname>VirtEncoder::initEnc</qualifiedname>
        <param>
          <type>bool</type>
          <declname>e0</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>e1</declname>
        </param>
        <briefdescription>
<para>Initialize the encoder with the specified values. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">e0</parametername>
</parameternamelist>
<parameterdescription>
<para>the value of the first encoder pin </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">e1</parametername>
</parameternamelist>
<parameterdescription>
<para>the value of the second encoder pin </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/VirtEncoder.h" line="134" column="10" bodyfile="src/core/VirtEncoder.h" bodystart="134" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="dc/d02/class_virt_encoder_1ad2702e1e7ea1b8bd1e9eea976fc61077" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void VirtEncoder::initEnc</definition>
        <argsstring>(int8_t v)</argsstring>
        <name>initEnc</name>
        <qualifiedname>VirtEncoder::initEnc</qualifiedname>
        <param>
          <type>int8_t</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Initialize the encoder with the specified value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">v</parametername>
</parameternamelist>
<parameterdescription>
<para>the initial value of the encoder </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/VirtEncoder.h" line="143" column="10" bodyfile="src/core/VirtEncoder.h" bodystart="143" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="dc/d02/class_virt_encoder_1a7a265f7e7e8758ef555fc42d6d23efd5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void VirtEncoder::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <qualifiedname>VirtEncoder::clear</qualifiedname>
        <briefdescription>
<para>Clear the encoder flags. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/VirtEncoder.h" line="150" column="10" bodyfile="src/core/VirtEncoder.h" bodystart="150" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="dc/d02/class_virt_encoder_1a25ad5e989164bdf4d10a83a1057a0001" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool VirtEncoder::turn</definition>
        <argsstring>()</argsstring>
        <name>turn</name>
        <qualifiedname>VirtEncoder::turn</qualifiedname>
        <briefdescription>
<para>Check if the encoder has been turned. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the encoder has been turned, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/VirtEncoder.h" line="161" column="10" bodyfile="src/core/VirtEncoder.h" bodystart="161" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="dc/d02/class_virt_encoder_1abf07cf920815fecb1438b28a4c29f52d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t VirtEncoder::dir</definition>
        <argsstring>()</argsstring>
        <name>dir</name>
        <qualifiedname>VirtEncoder::dir</qualifiedname>
        <briefdescription>
<para>Get the direction of rotation of the encoder. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>-1 if rotated left, 1 if rotated right </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/VirtEncoder.h" line="170" column="12" bodyfile="src/core/VirtEncoder.h" bodystart="170" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="dc/d02/class_virt_encoder_1a39814605b70ce60f2a27755571362b76" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/d00/utils_8h_1a5522e17c74054cb11d1d67e4bdeca67e" kindref="member">EB_FLAGS_T</ref></type>
        <definition>EB_FLAGS_T VirtEncoder::action</definition>
        <argsstring>()</argsstring>
        <name>action</name>
        <qualifiedname>VirtEncoder::action</qualifiedname>
        <briefdescription>
<para>Representing the possible flags for the encoder. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>EB_FLAGS_T can have the following values:<itemizedlist>
<listitem><para>EB_TURN: Represents the flag for turning action.</para>
</listitem><listitem><para>EB_TURN_L: Represents the flag for left turning action.</para>
</listitem><listitem><para>EB_TURN_R: Represents the flag for right turning action.</para>
</listitem><listitem><para>EB_NONE: Represents the flag for no action. </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/VirtEncoder.h" line="182" column="16" bodyfile="src/core/VirtEncoder.h" bodystart="182" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="dc/d02/class_virt_encoder_1a80e335bb4c1af4f1e209a874df16beef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t VirtEncoder::tickISR</definition>
        <argsstring>(bool e0, bool e1)</argsstring>
        <name>tickISR</name>
        <qualifiedname>VirtEncoder::tickISR</qualifiedname>
        <param>
          <type>bool</type>
          <declname>e0</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>e1</declname>
        </param>
        <briefdescription>
<para>Process the encoder tick using the interrupt service routine. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">e0</parametername>
</parameternamelist>
<parameterdescription>
<para>the value of the first encoder pin </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">e1</parametername>
</parameternamelist>
<parameterdescription>
<para>the value of the second encoder pin </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-1, 0, or 1 based on the direction of rotation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/VirtEncoder.h" line="202" column="12" bodyfile="src/core/VirtEncoder.h" bodystart="202" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="dc/d02/class_virt_encoder_1a9cedefb68bb0cd0ac9ed2a2804c3c818" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t VirtEncoder::tickISR</definition>
        <argsstring>(int8_t state)</argsstring>
        <name>tickISR</name>
        <qualifiedname>VirtEncoder::tickISR</qualifiedname>
        <param>
          <type>int8_t</type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Process the encoder tick using the interrupt service routine. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">state</parametername>
</parameternamelist>
<parameterdescription>
<para>the current state of the encoder </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-1, 0, or 1 based on the direction of rotation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/VirtEncoder.h" line="212" column="12" bodyfile="src/core/VirtEncoder.h" bodystart="212" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="dc/d02/class_virt_encoder_1a247cc0576b95540bb3cc94fe34a3879e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t VirtEncoder::tick</definition>
        <argsstring>(bool e0, bool e1)</argsstring>
        <name>tick</name>
        <qualifiedname>VirtEncoder::tick</qualifiedname>
        <param>
          <type>bool</type>
          <declname>e0</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>e1</declname>
        </param>
        <briefdescription>
<para>Process the encoder tick. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">e0</parametername>
</parameternamelist>
<parameterdescription>
<para>the value of the first encoder pin </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">e1</parametername>
</parameternamelist>
<parameterdescription>
<para>the value of the second encoder pin </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-1, 0, or 1 based on the direction of rotation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/VirtEncoder.h" line="228" column="12" bodyfile="src/core/VirtEncoder.h" bodystart="228" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="dc/d02/class_virt_encoder_1ae452240d0eb1cc8bfc00c6fa52691cb1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t VirtEncoder::tick</definition>
        <argsstring>(int8_t state)</argsstring>
        <name>tick</name>
        <qualifiedname>VirtEncoder::tick</qualifiedname>
        <param>
          <type>int8_t</type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Process the encoder tick. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">state</parametername>
</parameternamelist>
<parameterdescription>
<para>the current state of the encoder </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-1, 0, or 1 based on the direction of rotation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/VirtEncoder.h" line="238" column="12" bodyfile="src/core/VirtEncoder.h" bodystart="238" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="dc/d02/class_virt_encoder_1a19e253eba8cdb651f472635511f4ea2f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t VirtEncoder::tickRaw</definition>
        <argsstring>(bool e0, bool e1)</argsstring>
        <name>tickRaw</name>
        <qualifiedname>VirtEncoder::tickRaw</qualifiedname>
        <param>
          <type>bool</type>
          <declname>e0</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>e1</declname>
        </param>
        <briefdescription>
<para>Process the encoder tick without clearing the turn flag. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">e0</parametername>
</parameternamelist>
<parameterdescription>
<para>the value of the first encoder pin </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">e1</parametername>
</parameternamelist>
<parameterdescription>
<para>the value of the second encoder pin </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-1, 0, or 1 based on the direction of rotation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/VirtEncoder.h" line="268" column="12" bodyfile="src/core/VirtEncoder.h" bodystart="268" bodyend="270"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="d3/d01/class_encoder_1aa3018d6d0c56c249f7b64a57f142a626" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t Encoder::readEnc</definition>
        <argsstring>()</argsstring>
        <name>readEnc</name>
        <qualifiedname>Encoder::readEnc</qualifiedname>
        <briefdescription>
<para>Reads the current state of the encoder. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The current state of the encoder as a signed 8-bit integer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/Encoder.h" line="90" column="12" bodyfile="src/core/Encoder.h" bodystart="90" bodyend="92"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>The <ref refid="d3/d01/class_encoder" kindref="compound">Encoder</ref> class represents an encoder device. </para>
    </briefdescription>
    <detaileddescription>
<para>This class inherits from the <ref refid="dc/d02/class_virt_encoder" kindref="compound">VirtEncoder</ref> class and provides additional functionality for initializing and reading the encoder. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>Encoder</label>
        <link refid="d3/d01/class_encoder"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>VirtEncoder</label>
        <link refid="dc/d02/class_virt_encoder"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>Encoder</label>
        <link refid="d3/d01/class_encoder"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>VirtEncoder</label>
        <link refid="dc/d02/class_virt_encoder"/>
      </node>
    </collaborationgraph>
    <location file="src/core/Encoder.h" line="17" column="1" bodyfile="src/core/Encoder.h" bodystart="17" bodyend="93"/>
    <listofallmembers>
      <member refid="dc/d02/class_virt_encoder_1a39814605b70ce60f2a27755571362b76" prot="public" virt="non-virtual"><scope>Encoder</scope><name>action</name></member>
      <member refid="dc/d02/class_virt_encoder_1a96eb6f113c8af74ad511ee646f4159f4" prot="public" virt="non-virtual"><scope>Encoder</scope><name>attach_left</name></member>
      <member refid="dc/d02/class_virt_encoder_1ae8b27255ffb4264dd2ed1110c9926191" prot="public" virt="non-virtual"><scope>Encoder</scope><name>attach_right</name></member>
      <member refid="dc/d02/class_virt_encoder_1a1d31ec913728966cf0ef6ca774c5cfe6" prot="protected" virt="non-virtual"><scope>Encoder</scope><name>cb</name></member>
      <member refid="dc/d02/class_virt_encoder_1a7a265f7e7e8758ef555fc42d6d23efd5" prot="public" virt="non-virtual"><scope>Encoder</scope><name>clear</name></member>
      <member refid="dc/d02/class_virt_encoder_1a6bdb1a2dec10e1be3c14c3c49869ebab" prot="protected" virt="non-virtual"><scope>Encoder</scope><name>clr_encf</name></member>
      <member refid="dc/d02/class_virt_encoder_1a966668cc0a577818e294a4084b4dabea" prot="public" virt="non-virtual"><scope>Encoder</scope><name>counter</name></member>
      <member refid="dc/d02/class_virt_encoder_1a3a32f66b8b6888e75bb17e6ad88f12f0" prot="public" virt="non-virtual"><scope>Encoder</scope><name>detach_call</name></member>
      <member refid="dc/d02/class_virt_encoder_1abf07cf920815fecb1438b28a4c29f52d" prot="public" virt="non-virtual"><scope>Encoder</scope><name>dir</name></member>
      <member refid="d3/d01/class_encoder_1a74b8a66356f7789ee21cf25e69576666" prot="private" virt="non-virtual"><scope>Encoder</scope><name>e0</name></member>
      <member refid="d3/d01/class_encoder_1ae251adbf3347809ad4bd2233b3a82d5a" prot="private" virt="non-virtual"><scope>Encoder</scope><name>e1</name></member>
      <member refid="d3/d01/class_encoder_1afa2f29643453e2a3daeac00b0eaec48e" prot="public" virt="non-virtual"><scope>Encoder</scope><name>Encoder</name></member>
      <member refid="d3/d01/class_encoder_1adf55c5cca9a90167e22508fe6cdded45" prot="public" virt="non-virtual"><scope>Encoder</scope><name>init</name></member>
      <member refid="dc/d02/class_virt_encoder_1a5cb9dd003233ebe80ec7c8946492c961" prot="public" virt="non-virtual"><scope>Encoder</scope><name>initEnc</name></member>
      <member refid="dc/d02/class_virt_encoder_1ad2702e1e7ea1b8bd1e9eea976fc61077" prot="public" virt="non-virtual"><scope>Encoder</scope><name>initEnc</name></member>
      <member refid="dc/d02/class_virt_encoder_1aa5dbe1eb7b590f4a97498a20e1b5542e" prot="public" virt="non-virtual"><scope>Encoder</scope><name>pollEnc</name></member>
      <member refid="dc/d02/class_virt_encoder_1a0257b348f0139e7a8fed629bb8acbde0" prot="public" virt="non-virtual"><scope>Encoder</scope><name>pollEnc</name></member>
      <member refid="dc/d02/class_virt_encoder_1a1daa32206f3c108deb4aaad943f96fef" prot="protected" virt="non-virtual"><scope>Encoder</scope><name>read_encf</name></member>
      <member refid="d3/d01/class_encoder_1aa3018d6d0c56c249f7b64a57f142a626" prot="private" virt="non-virtual"><scope>Encoder</scope><name>readEnc</name></member>
      <member refid="dc/d02/class_virt_encoder_1aab174e7ed37b422a27192aedee8be977" prot="protected" virt="non-virtual"><scope>Encoder</scope><name>set_encf</name></member>
      <member refid="dc/d02/class_virt_encoder_1a5d17150b3610b8978bdde0540c1e1c55" prot="public" virt="non-virtual"><scope>Encoder</scope><name>setEncISR</name></member>
      <member refid="dc/d02/class_virt_encoder_1ad161c0d2a29621731ff89d250ddd8a4f" prot="public" virt="non-virtual"><scope>Encoder</scope><name>setEncReverse</name></member>
      <member refid="dc/d02/class_virt_encoder_1aade2ae205e9ec50bed6d76ce3c0f33a9" prot="public" virt="non-virtual"><scope>Encoder</scope><name>setEncType</name></member>
      <member refid="d3/d01/class_encoder_1a10b27af0b62a9bc4138f861ab19c4b08" prot="public" virt="non-virtual"><scope>Encoder</scope><name>tick</name></member>
      <member refid="dc/d02/class_virt_encoder_1a247cc0576b95540bb3cc94fe34a3879e" prot="public" virt="non-virtual" ambiguityscope="VirtEncoder::"><scope>Encoder</scope><name>tick</name></member>
      <member refid="dc/d02/class_virt_encoder_1ae452240d0eb1cc8bfc00c6fa52691cb1" prot="public" virt="non-virtual" ambiguityscope="VirtEncoder::"><scope>Encoder</scope><name>tick</name></member>
      <member refid="d3/d01/class_encoder_1aba6517e3652d6b92b55e9b9a0b2a8667" prot="public" virt="non-virtual"><scope>Encoder</scope><name>tickISR</name></member>
      <member refid="dc/d02/class_virt_encoder_1a80e335bb4c1af4f1e209a874df16beef" prot="public" virt="non-virtual" ambiguityscope="VirtEncoder::"><scope>Encoder</scope><name>tickISR</name></member>
      <member refid="dc/d02/class_virt_encoder_1a9cedefb68bb0cd0ac9ed2a2804c3c818" prot="public" virt="non-virtual" ambiguityscope="VirtEncoder::"><scope>Encoder</scope><name>tickISR</name></member>
      <member refid="d3/d01/class_encoder_1a81df852424a4b900d9ad92429405aae3" prot="public" virt="non-virtual"><scope>Encoder</scope><name>tickRaw</name></member>
      <member refid="dc/d02/class_virt_encoder_1a19e253eba8cdb651f472635511f4ea2f" prot="public" virt="non-virtual" ambiguityscope="VirtEncoder::"><scope>Encoder</scope><name>tickRaw</name></member>
      <member refid="dc/d02/class_virt_encoder_1a439bdcec3f5dc165e4a4ed8b8fdb9035" prot="public" virt="non-virtual" ambiguityscope="VirtEncoder::"><scope>Encoder</scope><name>tickRaw</name></member>
      <member refid="dc/d02/class_virt_encoder_1a25ad5e989164bdf4d10a83a1057a0001" prot="public" virt="non-virtual"><scope>Encoder</scope><name>turn</name></member>
      <member refid="dc/d02/class_virt_encoder_1ab0ba73852e308a8e365ef438f0cdc0b0" prot="public" virt="non-virtual"><scope>Encoder</scope><name>VirtEncoder</name></member>
      <member refid="dc/d02/class_virt_encoder_1aa729ee6d9919727d86a7eecd2f51e724" prot="protected" virt="non-virtual"><scope>Encoder</scope><name>write_encf</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
